/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const init_test_sequence_generator: (a: number) => void;
export const generate_c_major_scale_test: (a: number, b: number) => [number, number];
export const generate_chromatic_scale_test: (a: number, b: number) => [number, number];
export const generate_arpeggio_test: (a: number, b: number) => [number, number];
export const generate_chord_test: (a: number, b: number) => [number, number];
export const generate_velocity_test: (a: number, b: number) => [number, number];
export const midi_note_to_name: (a: number) => [number, number];
export const note_name_to_midi: (a: number, b: number) => number;
export const execute_test_sequence: (a: number, b: number) => number;
export const quick_c_major_test: () => [number, number];
export const __wbg_audioworkletbridge_free: (a: number, b: number) => void;
export const audioworkletbridge_new: (a: number) => number;
export const audioworkletbridge_get_sample_rate: (a: number) => number;
export const audioworkletbridge_set_buffer_size: (a: number, b: number) => void;
export const audioworkletbridge_get_buffer_size: (a: number) => number;
export const audioworkletbridge_process_audio_buffer: (a: number, b: number) => [number, number];
export const audioworkletbridge_process_stereo_buffer: (a: number, b: number) => [number, number];
export const audioworkletbridge_process_dual_mono: (a: number, b: number) => any;
export const audioworkletbridge_get_midi_player: (a: number) => number;
export const audioworkletbridge_queue_midi_event: (a: number, b: bigint, c: number, d: number, e: number, f: number) => void;
export const audioworkletbridge_set_device_info: (a: number, b: number, c: number) => void;
export const audioworkletbridge_record_processing_time: (a: number, b: number, c: number) => void;
export const audioworkletbridge_record_underrun: (a: number) => void;
export const audioworkletbridge_record_overrun: (a: number) => void;
export const audioworkletbridge_get_buffer_metrics: (a: number) => [number, number];
export const audioworkletbridge_get_buffer_status: (a: number) => [number, number];
export const audioworkletbridge_get_recommended_buffer_size: (a: number, b: number) => number;
export const audioworkletbridge_get_current_latency_ms: (a: number) => number;
export const audioworkletbridge_set_optimal_buffer_size: (a: number, b: number) => void;
export const audioworkletbridge_set_adaptive_mode: (a: number, b: number) => void;
export const audioworkletbridge_reset_buffer_metrics: (a: number) => void;
export const audioworkletbridge_get_debug_log: (a: number) => [number, number];
export const audioworkletbridge_test_worklet_bridge: (a: number, b: number) => [number, number];
export const audioworkletbridge_reset_audio_state: (a: number) => void;
export const audioworkletbridge_get_audio_stats: (a: number) => [number, number];
export const audioworkletbridge_get_pipeline_status: (a: number) => [number, number];
export const audioworkletbridge_is_pipeline_ready: (a: number) => number;
export const audioworkletbridge_get_pipeline_stats: (a: number) => [number, number];
export const audioworkletbridge_reset_pipeline: (a: number) => void;
export const audioworkletbridge_get_comprehensive_status: (a: number) => [number, number];
export const calculate_optimal_buffer_size: (a: number, b: number) => number;
export const validate_sample_rate: (a: number) => number;
export const ms_to_samples: (a: number, b: number) => number;
export const samples_to_ms: (a: number, b: number) => number;
export const __wbg_midievent_free: (a: number, b: number) => void;
export const __wbg_get_midievent_timestamp: (a: number) => bigint;
export const __wbg_set_midievent_timestamp: (a: number, b: bigint) => void;
export const __wbg_get_midievent_channel: (a: number) => number;
export const __wbg_set_midievent_channel: (a: number, b: number) => void;
export const __wbg_get_midievent_message_type: (a: number) => number;
export const __wbg_set_midievent_message_type: (a: number, b: number) => void;
export const __wbg_get_midievent_data1: (a: number) => number;
export const __wbg_set_midievent_data1: (a: number, b: number) => void;
export const __wbg_get_midievent_data2: (a: number) => number;
export const __wbg_set_midievent_data2: (a: number, b: number) => void;
export const midievent_new: (a: bigint, b: number, c: number, d: number, e: number) => number;
export const __wbg_midiplayer_free: (a: number, b: number) => void;
export const midiplayer_new: () => number;
export const midiplayer_queue_midi_event: (a: number, b: number) => void;
export const midiplayer_process_midi_events: (a: number, b: bigint) => number;
export const midiplayer_get_debug_log: (a: number) => [number, number];
export const midiplayer_play_test_tone: (a: number) => number;
export const midiplayer_test_envelope_system: (a: number) => [number, number];
export const midiplayer_load_midi_file: (a: number, b: number, c: number) => number;
export const midiplayer_play: (a: number) => void;
export const midiplayer_pause: (a: number) => void;
export const midiplayer_stop: (a: number) => void;
export const midiplayer_seek: (a: number, b: number) => void;
export const midiplayer_set_tempo_multiplier: (a: number, b: number) => void;
export const midiplayer_get_playback_state: (a: number) => number;
export const midiplayer_get_position: (a: number) => number;
export const midiplayer_get_position_seconds: (a: number) => number;
export const midiplayer_get_duration_seconds: (a: number) => number;
export const midiplayer_get_current_tempo_bpm: (a: number) => number;
export const midiplayer_get_original_tempo_bpm: (a: number) => number;
export const midiplayer_advance_time: (a: number, b: number) => void;
export const midiplayer_process: (a: number) => number;
export const midiplayer_test_synthesis_pipeline: (a: number) => [number, number];
export const init_audio_worklet: (a: number) => number;
export const process_audio_buffer: (a: number) => [number, number];
export const get_sample_rate: () => number;
export const queue_midi_event_global: (a: bigint, b: number, c: number, d: number, e: number) => void;
export const process_stereo_buffer_global: (a: number) => [number, number];
export const set_buffer_size_global: (a: number) => void;
export const get_buffer_size_global: () => number;
export const reset_audio_state_global: () => void;
export const test_audio_worklet_global: (a: number) => [number, number];
export const get_debug_log_global: () => [number, number];
export const set_device_info_global: (a: number, b: number) => void;
export const record_processing_time_global: (a: number, b: number) => void;
export const record_underrun_global: () => void;
export const get_buffer_metrics_global: () => [number, number];
export const get_buffer_status_global: () => [number, number];
export const get_recommended_buffer_size_global: (a: number) => number;
export const get_current_latency_ms_global: () => number;
export const set_adaptive_mode_global: (a: number) => void;
export const get_pipeline_status_global: () => [number, number];
export const is_pipeline_ready_global: () => number;
export const get_pipeline_stats_global: () => [number, number];
export const reset_pipeline_global: () => void;
export const get_comprehensive_status_global: () => [number, number];
export const init_all_systems: (a: number) => number;
export const get_system_status: () => [number, number];
export const get_version_info: () => [number, number];
export const init_soundfont_module: () => [number, number];
export const validate_soundfont_header: (a: number, b: number) => [number, number];
export const get_soundfont_info: () => [number, number];
export const test_soundfont_module: () => [number, number];
export const parse_soundfont_file: (a: number, b: number) => [number, number];
export const test_soundfont_parsing: () => [number, number];
export const load_soundfont_into_player: (a: number, b: number) => [number, number];
export const select_preset_global: (a: number, b: number) => [number, number];
export const get_current_preset_info_global: () => [number, number];
export const test_soundfont_synthesis: () => [number, number];
export const __wbindgen_export_0: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_start: () => void;
