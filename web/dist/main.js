/**
 * AWE Player - Main Entry Point for Phase 8 Web Audio Integration
 *
 * Phase 8B Focus: Complete Web Interface
 * - Initialize WASM module
 * - Set up organized UI controls
 * - Test complete browser playback pipeline
 */
import { DebugLogger } from './utils/debug-logger.js';
import { UIControlManager } from './ui-controls.js';
// Create debug logger instance for main application
const logger = new DebugLogger({ componentName: 'Main', enabled: true });
// Global state
let wasmModule = null;
let midiPlayer = null;
let uiControlManager = null;
/**
 * Initialize the application
 */
async function main() {
    try {
        logger.log('🚀 AWE Player starting - Phase 8B Complete Web Interface');
        // Step 1: Load WASM module
        await initializeWASM();
        // Step 2: Initialize UI Control Manager
        uiControlManager = new UIControlManager(wasmModule, midiPlayer);
        uiControlManager.initialize();
        logger.log('✅ AWE Player initialization complete');
    }
    catch (error) {
        logger.log('❌ Failed to initialize AWE Player', error);
        // Update status directly since UI manager might not be available
        const wasmStatus = document.getElementById('wasm-status');
        const audioStatus = document.getElementById('audio-status');
        const workletStatus = document.getElementById('worklet-status');
        if (wasmStatus)
            wasmStatus.textContent = 'WASM: Error';
        if (audioStatus)
            audioStatus.textContent = 'Audio: Failed';
        if (workletStatus)
            workletStatus.textContent = 'AudioWorklet: Failed';
    }
}
/**
 * Load and initialize the WASM module
 */
async function initializeWASM() {
    try {
        logger.log('📦 Loading WASM module...');
        // Import WASM module (generated by wasm-pack)
        const wasmPkg = await import('./wasm-pkg/awe_synth.js');
        await wasmPkg.default(); // Initialize WASM
        wasmModule = wasmPkg;
        // Create MidiPlayer instance
        midiPlayer = new wasmModule.MidiPlayer();
        logger.log('✅ WASM module loaded successfully');
        logger.log('🎹 MidiPlayer instance created');
    }
    catch (error) {
        throw new Error(`Failed to load WASM module: ${error}`);
    }
}
// Start the application
main().catch(error => {
    console.error('💥 Fatal error during initialization:', error);
    // Update status directly since UI manager might not be available
    const wasmStatus = document.getElementById('wasm-status');
    if (wasmStatus) {
        wasmStatus.textContent = 'WASM: Fatal Error';
        wasmStatus.className = 'status-item error';
    }
});
//# sourceMappingURL=main.js.map